// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int     @id @default(autoincrement())
  nickname      String  @unique @default(uuid())
  email         String  @unique
  password      String?
  picture       String?

  isNewUser     Boolean @default(true)

  isTwoFAEnabled  Boolean @default(false)
  twoFASecret     String? @unique

  members       Member[]

  blocked       User[]  @relation("block")
  blockedBy     User[]  @relation("block")

  friends       User[]  @relation("friend")
  friendOf      User[]  @relation("friend")

  matchHistory  MatchResult[]
  elo           Int     @default(1000)
}

model Member {
  id          Int       @id @default(autoincrement())
  role        Role
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   Int
  messages    Message[]
  mutedUntil  DateTime  @default("1970-01-01T00:00:00+00:00")
}

model Channel {
  id                  Int       @id @default(autoincrement())
  name                String
  isGroup             Boolean
  isPublic            Boolean
  isPasswordProtected Boolean
  password            String?
  members             Member[]
  messages            Message[]
}

model Message {
  id          Int       @id @default(autoincrement())
  type        MessageType
  content     String
  author      Member    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  createdAt   DateTime  @default(now())
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   Int
}

model MatchResult {
  id              Int       @id @default(autoincrement())
  player          User      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId        Int
  result          MatchStatus
  otherPlayerId   Int
  otherPlayerName String
  myScore         Int
  otherScore      Int
}

enum MessageType {
  REGULAR
  INVITE
}

enum Role {
  OWNER
  ADMIN
  REGULAR
  LEFT
  BANNED
}

enum MatchStatus {
  WIN
  LOSS
  DRAW
}
